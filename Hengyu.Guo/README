Week 1:
       Apr.3:   Our team members have a meeting talking about individual responsibility.
	        Form a group of three to implements front-end on heroku and a group of two
	        to implements MongoDB.
       Apr.7:   Researching of node.js about downloading and installing. Deploying the sim-
	        ple HelloWorld project. Finding some useful tutorial about node.js.
       Apr.8:   Researching of heroku about downloading and installing. Deploying the sim-
	        ple starter project based on the tutorial.
       Apr.9:   Asking professor about the responsibility of individual. And reform the gr-
	        oup of two for front-end, two for MongoDB. My responsibility change to imp-
	        lement Cassandra for user activity logs.

       node.js tutorial:

		http://www.tutorialspoint.com/nodejs/
		https://www.airpair.com/javascript/node-js-tutorial
		https://nodejs.org/en/docs/
		http://www.nodebeginner.org/
		https://www.codeschool.com/courses/real-time-web-with-node-js
		https://docs.mongodb.org/getting-started/node/client/

	node.js Doc:

		https://nodejs.org/en/docs/

	heroku tutorial:
		https://devcenter.heroku.com/start
		https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction

	cassandra tutorial:
		http://www.tutorialspoint.com/cassandra/

Week 2:
        Apr.12:  Research on cassandra from tutorial points. Study cassandra introduction, 
                 architecture, data model, installation, referenced API, CQL, and so on...
        Apr.14:  Download DataStax Distribution of Apache Cassandra. Configure a local connection
                 on port 9042. Create a new keyspace 'demo' with table users. Test local 
                 environment with nodejs. Using async.series to simulate create, select, update
                 delete operation with CQL. Test passed successfully.
        Apr.15:  Deploy AWS EC2 instance, test cassandra on EC2 instance, test CRUD operations.
        Apr.16:  After group discussion, I change the responsibility to build the front end. I 
		 will first build a system structure based on nodejs and express. Using bootstrap
		 to build the html user interfaces.

Week 3:
	Apr.17:  Coding routes using express's rest service framework. For index page, using nodejs
		 http core library to request the json data from Amazon EC2 instance MongoDB database.
		 Parse the response stream data to json object. Then using express's response object 
		 to render the index page. Contacting team members in charge of databases, talking 
		 about the problem during the coding practice.
	Apr.19:  Coding for router/controller in nodejs. Writing code for user register and error
		 validation, user login and error validation, user edit profile and error validation.
		 Writing code for product presentation, including thumbnail image, product title and 
		 product price. Writing code for product detail page, using rest url to include 
		 productID in the url and use body-parser to parse the rest url to get the product 
		 detail information.
	Apr.21:  Unit Testing for user register, error validation, user login and error validation, 
                 user edit profile and error validation, movie presentation, movie detail page pres-
		 entation. Integration test for the above part with amazon EC2 MongoDB services.
	Apr.22:  Team meeting about project milestone. Presentation of my work of frontend framework
		 and pages, nodejs routers, and interaction with backend database rest services.

Week 4: 
	Apr.25:  Co-op with Mingxiao Guo for shopping cart design, page coding and REST API coding.
		 Checking User information from request session object. If user is not login, redirect
		 him/her to login page. If user is login, goto shopping cart page and let user do the
		 add item or remove item operation.
	Apr.27:  Add javascript call from front-end html pages to communicate with backend server on 
		 heroku platform. Building for responsive website for improving user experience. Doing 
		 some little adjust on the web framework. Prepare to add some fancy UI in the website.
	Apr.29:  Help teammates debug for administrator's function. Administrator can delete product 
		 from the product collection. Using nodejs request library to send delete rest call to
		 AWS EC2 backend. Finished debugging and it works well now. Finishing front-end jQuery
		 http method call for communicate with heroku backend.	 